#Fast change to a sub-folder of dotfiles. Alias this to 'df' or your preference
df(){
    cd ${HOME}/dotfiles/$1
}
_cddf() {
    local cur opts
    cur="${COMP_WORDS[COMP_CWORD]}"
    opts=$(cd ~/dotfiles; ls -d * | sed 's|/./||')
    COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
}
complete -F _cddf df

# Git
#git rebase HEAD~${n}
grih(){
  git rebase -i HEAD~$1
}

# git pull -r $this_branch (allows master)
gp(){
  git pull -r origin $(git branch | awk '{print $2'}) 
}

#git push origin $this_branch (does not allow master)
gpo(){
  git push origin $(git branch | grep -v master | awk '{print $2'})
}

#git push --force origin $this_branch (does not allow master)
gfpo(){
  git push --force origin $(git branch | grep -v master | awk '{print $2'})
}

# DOCKER

# Get a container's id by name match
docker_id(){
    if [[ "$1" == "" ]]; then
	    echo "you need to specify a string to match the container name against"
	    echo "Usage: docker_id <match>"
	    echo "--------------------------------"
	    echo "available containers:"
	    docker ps
    else
	    docker ps | grep "$1" | sed 's/|/ /' | awk '{print $1}'
    fi
}


#Enter a docker container
docker_enter_id(){
    if [[ "$1" == "" ]]; then
	echo "you need to specify a container id"
	echo "Usage: docker_enter_id <container_id>"
	echo "--------------------------------"
	echo "available containers:"
	docker ps
    else
        docker exec -it $1 bash
    fi
}

#Enter a docker container by name or ID match
docker_enter(){
    if [[ "$1" == "" ]]; then
	    echo "you need to specify a string to match the container name against"
	    echo "Usage: docker_enter <match>"
	    echo "--------------------------------"
	    echo "available containers:"
	    docker ps
    else
	    DOCKERID=$(docker ps | grep "$1" | sed 's/|/ /' | awk '{print $1}' 2>&1)
      docker exec -it $DOCKERID bash
    fi
}

# Delete docker container by name
docker_rm(){
  if [[ "$1" == "" ]]; then
    echo "you need to specify a string to match the container name against"
    echo "Usage: docker_rm <match>"
    echo "--------------------------------"
    echo "available containers:"
    docker ps
  else
    DOCKERID=$(docker ps | grep "$1" | sed 's/|/ /' | awk '{print $1}' 2>&1)
    docker rm -f $DOCKERID
  fi
}

# clean up unused images
docker_remove_images(){
  for i in $(docker images | grep "<none>" | awk '{print $3}'); do
      docker rmi ${i}
  done
  echo "All unused images removed"
}

# remove all docker images
docker_remove_all_images(){
  docker rmi $(docker images -q)
}

# remove all docker containers
docker_remove_all_containers(){
  docker rm -f $(docker ps -a -q)
}

# remove all stopped docker containers
docker_remove_stopped(){
  for i in $(docker ps -a --filter "status=exited" --format "{{.ID}}"); do
    docker rm ${i}
  done
  echo "All stopped containers removed"
}

# Delete all old unused containers and images
docker_garbage_collect(){
  docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /etc:/etc spotify/docker-gc
}


# Add tab completion for container names to docker commands
complete -o "default" -o "nospace" -W "$(docker ps --format \"{{.Names}}\")" docker docker_enter docker_enter_id docker_id docker_rm;
complete -o "default" -o "nospace" -W "$(docker images --format \"{{.ID}}\")" docker_rm_image;


#Json Lint
json_lint(){
  echo "$1" | python -mjson.tool
}
